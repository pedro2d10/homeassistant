#####################################################################
#                                                                   #
#                 Changement de la lumiere pour Plex                #
#                                                                   #
#####################################################################

- alias: "Media player stopped"
  trigger:
    - platform: state
      entity_id: sensor.PlexPlayStatus
      to: "stop"
    - platform: state
      entity_id: sensor.PlexMediaType
      to: "BRAVIA 4K 2015"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sun.sun
        #state: above_horizon
        state: "below_horizon"
      - condition: state
        entity_id: sensor.PlexMediaType
        state: "BRAVIA 4K 2015"
  action:
    #service: light.turn_on
    #entity_id: light.hue_white_lamp_1
    service: scene.turn_on
    entity_id: scene.Bedroom_normal

- alias: "Media player playing"
  trigger:
    - platform: template
      value_template: "{{ states('sensor.PlexPlayStatus') in ['play','resume'] }}"
    - platform: state
      entity_id: sensor.PlexMediaType
      to: "BRAVIA 4K 2015"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sun.sun
        #state: above_horizon
        state: "below_horizon"
      - condition: state
        entity_id: sensor.PlexMediaType
        state: "BRAVIA 4K 2015"

  action:
    #service: light.turn_off
    #entity_id: light.hue_white_lamp_1
    service: scene.turn_on
    entity_id: scene.Bedroom_off

- alias: "Media player pause"
  trigger:
    - platform: state
      entity_id: sensor.PlexPlayStatus
      to: "pause"
    - platform: state
      entity_id: sensor.PlexMediaType
      to: "BRAVIA 4K 2015"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: sun.sun
        #state: above_horizon
        state: "below_horizon"
      - condition: state
        entity_id: sensor.PlexMediaType
        state: "BRAVIA 4K 2015"
  action:
    #service: light.turn_on
    #entity_id: light.hue_white_lamp_1
    service: scene.turn_on
    entity_id: scene.Bedroom_dim

#####################################################################
#                                                                   #
#                 Changement de la variable pour la porte ouverte   #
#                                                                   #
#####################################################################

# # Update Last Motion variable
# - alias: "Update Last Open Door"
#   trigger:
#     platform: state
#     entity_id: binary_sensor.contactlivingroomdoor_contact
#     to: "on"
#   action:
#     - service: variable.set_variable
#       data:
#         variable: last_motion
#         attributes_template: >
#           {
#             "history_1": "{{ variable.state }}",
#             "history_2": "{{ variable.attributes.history_1 }}",
#             "history_3": "{{ variable.attributes.history_2 }}"
#           }
#       data_template:
#         value: "{{as_timestamp(states.variable.last_motion.last_changed)| timestamp_custom('%X') }}"

#####################################################################
#                                                                   #
#                 Strip Led                                         #
#                                                                   #
#####################################################################

# - alias: "Bureau pierre"
#   trigger:
#     platform: state
#     entity_id: binary_sensor.button1
#     to: "on"
#   action:
#     service: light.toggle
#     entity_id: light.bureau_leds

#####################################################################
#                                                                   #
#                 Allumer  la lumiere du bureau                     #
#                 Lors d'un mouvement                               #
#                                                                   #
#####################################################################

# - alias: Turn on desk light when there is movement
#   trigger:
#     platform: state
#     entity_id: binary_sensor.pir_sensor_2
#     to: "on"
#   action:
#     service: light.turn_on
#     entity_id: light.hue_white_lamp_1_light

# - alias: Turn off desk light 1 minutes after last movement
#   trigger:
#     platform: state
#     entity_id: binary_sensor.pir_sensor_2
#     to: "off"
#     for:
#       minutes: 1
#   action:
#     service: light.turn_off
#     entity_id: light.hue_white_lamp_1_light

#####################################################################
#                                                                   #
#                 Gestion de la poubelle                            #
#                                                                   #
#####################################################################

- alias: Poubelle a sortir
  trigger:
    platform: state
    entity_id: sensor.livingroomswitch_click
    to: "right_double"
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.poubelle_boulean

- alias: Prevenir de sortir la Poubelle
  trigger:
    platform: state
    entity_id: binary_sensor.contactlivingroomdoor_contact
    to: "on"
  condition:
    condition: state
    entity_id: input_boolean.poubelle_boulean
    state: "on"
  action:
    - service: notify.telegram_notif
      data_template:
        #title: '*Une poubellle à Sortir*'
        message: "Hey Coco!!

          Tu as une *poubelle* à sortir"
        data:
          inline_keyboard:
            - "Ok c'est fait:/poubelleok"
            - "Mince j'ai oublié:/nopoubelle"
    - service: homeassistant.turn_on
      entity_id: script.flash_room1
    - service: timer.start
      data:
        entity_id: timer.flash

- alias: "flash_room1_stop"
  trigger:
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.flash
  action:
    service: homeassistant.turn_off
    entity_id:
      - script.flash_room1
      - script.flash_loop

- alias: "Reponse des poubelles OK"
  #  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/poubelleok"
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Merci l'ami"
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.poubelle_boulean
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "{{ trigger.event.data.message.message_id }}"
        chat_id: "{{ trigger.event.data.user_id }}"
        inline_keyboard: []

- alias: "Reponse des poubelles NOK"
  #  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/nopoubelle"
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Ok je te le rappelerais à la prochaine sortie"
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.poubelle_boulean
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "{{ trigger.event.data.message.message_id }}"
        chat_id: "{{ trigger.event.data.user_id }}"
        inline_keyboard: []

- alias: "Telegram bot that reply pong to ping"
  #  hide_entity: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/ping"
  action:
    - service: notify.telegram_notif
      data:
        message: "pong"

#####################################################################
#                                                                   #
#                 Gestion des interrupteurs du salon                #
#                                                                   #
#####################################################################

- alias: reponse au interrupteurs du salon
  trigger:
    platform: state
    entity_id:
      - sensor.doorswitch_click
      - sensor.livingroomswitch_click
    to: "right"
  action:
    entity_id: light.salon
    service: light.toggle

# - alias: reset salon color and brightness
#   trigger:
#     platform: state
#     entity_id: light.salon
#     to: 'on'
#   action:
#     service: light.turn_on
#     data:
#       entity_id: light.salon
#       brightness_pct: 100
#       kelvin: 2700

- alias: reponse au interrupteurs du salon both click turn off
  trigger:
    platform: state
    entity_id:
      - sensor.doorswitch_click
      - sensor.livingroomswitch_click
    to: "both"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: light.salon
        state: "on"
      - condition: state
        entity_id: light.entree
        state: "on"
  action:
    entity_id:
      - light.salon
      - light.entree
    service: light.turn_off

- alias: reponse au interrupteurs du salon both click turn on
  trigger:
    platform: state
    entity_id:
      - sensor.doorswitch_click
      - sensor.livingroomswitch_click
    to: "both"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: light.salon
        state: "off"
      - condition: state
        entity_id: light.entree
        state: "off"
  action:
    entity_id:
      - light.salon
      - light.entree
    service: light.turn_on

#####################################################################
#                                                                   #
#                 Gestion de l'interrupteur du bureau               #
#                                                                   #
#####################################################################

- alias: reponse a l insterrupteur du bureau
  trigger:
    platform: state
    entity_id:
      - sensor.deskswitch_click
    to: "single"
  action:
    - service: light.toggle
      data:
        entity_id: light.hue_white_lamp_1_light
        transition: 0

- alias: reponse a l insterrupteur de la chambre
  trigger:
    platform: state
    entity_id:
      - sensor.bedroomswitch_click
    to: "single"
  action:
    entity_id: light.chambre
    service: light.toggle

- alias: reponse au interrupteurs de l'entree
  trigger:
    platform: state
    entity_id:
      - sensor.doorswitch_click
      - sensor.livingroomswitch_click
    to: "left"
  action:
    entity_id: light.entree
    service: light.toggle

- alias: allumer l'entree quand la porte est ouverte
  trigger:
    platform: state
    entity_id: binary_sensor.contactlivingroomdoor_contact
    to: "on"
  action:
    service: homeassistant.turn_on
    entity_id: light.entree

- alias: eteindre l'entree au bout d'1 minute
  trigger:
    platform: state
    entity_id: binary_sensor.contactlivingroomdoor_contact
    to: "off"
    for:
      minutes: 1
  action:
    service: homeassistant.turn_off
    entity_id: light.entree

- alias: Zigbee2mqtt Log Level
  initial_state: "on"
  trigger:
    platform: state
    entity_id: input_select.zigbee2mqtt_log_level
  action:
    - service: mqtt.publish
      data:
        payload_template: "{{ states('input_select.zigbee2mqtt_log_level') }}"
        topic: zigbee2mqtt/bridge/config/log_level

- id: enable_zigbee_join
  alias: Enable Zigbee joining
  #  hide_entity: true
  trigger:
    platform: state
    entity_id: switch.zigbee2mqtt_main_join
    to: "on"
  action:
    - service: timer.start
      data:
        entity_id: timer.zigbee_permit_join

- id: disable_zigbee_join_timer
  alias: Disable Zigbee joining by timer
  #  hide_entity: true
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.zigbee_permit_join

    - platform: state
      entity_id: switch.zigbee2mqtt_main_join
      to: "off"
  action:
    - service: timer.cancel
      data:
        entity_id: timer.zigbee_permit_join
    - service: switch.turn_off
      entity_id: switch.zigbee2mqtt_main_join

# - alias: Write Stepper Value to ESP
#   trigger:
#     platform: state
#     entity_id: input_number.stepper_control
#   action:
#     # Replace livingroom with the name you gave the ESP
#     - service: esphome.stepper_motor
#       data_template:
#         target: "{{ trigger.to_state.state | int }}"

#####################################################################
#                                                                   #
#                 Gestion du ballon d'eau chaude                    #
#                                                                   #
#####################################################################

- alias: "Arrêt du ballon"
  trigger:
    - platform: time
      at: "06:00:00"
  action:
    - service: homeassistant.turn_off
      data:
        entity_id:
          - switch.heater

- alias: "Demarrage du ballon"
  trigger:
    - platform: time
      at: "00:00:00"
  action:
    - service: homeassistant.turn_on
      data:
        entity_id:
          - switch.heater

# - alias: lash the desk
#   trigger:
#     - platform: state
#       entity_id: input_boolean.flash_boolean
#       to: on
#   action:
#     - service: light.toggle
#       data:
#         entity_id: light.hue_white_lamp_1_light
#         transition: 0

# - alias: flash the desk
#   trigger:
#     platform: state
#     entity_id:
#       - input_boolean.flash_boolean
#     to: "on"
#   action:
#     # - service: light.turn_off
#     #   entity_id: light.bureau_leds

#     - service: light.turn_on
#       data:
#         entity_id: light.bureau_leds
#         flash: short
#         rgb_color: [255, 0, 0]
#     - service: input_boolean.turn_off
#       entity_id: input_boolean.flash_boolean

# - id: download_start
#   alias: download_start
#   trigger:
#     - platform: state
#       entity_id: sensor.transmission_status
#       to: "Downloading"
#   action:
#     - service: light.turn_on
#       data:
#         entity_id: light.bureau_leds
#         flash: short
#         rgb_color: [255, 0, 0]

- alias: "[System] - Make weekly Hassio backup"
  trigger:
    - platform: time
      at: "03:00:00"
  condition:
    - condition: time
      weekday:
        - sun
  action:
    - service: hassio.snapshot_full
      data_template:
        name: Backup {{ now().strftime('%Y-%m-%d') }} running HA version {{ states('sensor.version_current') }}
    - service: notify.telegram_notif
      data_template:
        title: Hass.io Backup!
        message: >-
          'Backup généré avec comme nom: Backup {{ now().strftime('%Y-%m-%d') }} running HA version {{ states('sensor.version_current') }}'

- id: lightalarm
  alias: Lightalarm
  #  hide_entity: false
  trigger:
    platform: template
    value_template: "{% set currentTimeInMinutes = ((states('sensor.time')[:2] |
      float) * 60) + (states('sensor.time')[3:5] | float) %} {% set alarmTimeInMinutes = ((states('input_datetime.lightalarm_time')[:2]
      | float) * 60) + (states('input_datetime.lightalarm_time')[3:5] | float) -
      (states('input_number.lightalarm_duration') | float) %} {{ currentTimeInMinutes
      == alarmTimeInMinutes }}"

  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: input_select.lightalarm_options
        state: Every Day
      - condition: state
        entity_id: input_select.lightalarm_options
        state: Once Only
      - condition: and
        conditions:
          - condition: state
            entity_id: input_select.lightalarm_options
            state: Workdays
          - condition: template
            value_template: "{{ now().weekday() < 5 }}"
      - condition: and
        conditions:
          - condition: state
            entity_id: input_select.lightalarm_options
            state: Workdays When Present
          - condition: template
            value_template: "{{ now().weekday() < 5 }}"
          - condition: state
            entity_id: person.pierre
            state: home

  action:
    service: script.1581971625864
# - alias: Rhasspy Light States
#   description: Voice Control on/off states for all lights
#   trigger:
#     - event_data: {}
#       event_type: rhasspy_ChangeLightState
#       platform: event
#   condition: []
#   action:
#     - alias: ""
#       data_template:
#         light_name: "{{ trigger.event.data.light_name }}"
#         light_state: "{{ trigger.event.data.light_state }}"
#       service: script.rhasspy_light_state

# - alias: Rhasspy GetTime
#   description: ""
#   trigger:
#     - event_data: {}
#       event_type: rhasspy_GetTime
#       platform: event
#   condition: []
#   action:
#     - data_template:
#         payload_data: "{% set response %}\
#           \ {% if now().hour > 12 %}\
#           \ {% set the_hours = now().hour  %}\
#           \ {% else %}\
#           \ {% set the_hours = now().hour %}\
#           \ {%endif %}\
#           \ il est {{ the_hours }} heure {{ now().minute }}{% endset %} {{response }}"
#       service: rest_command.tts
